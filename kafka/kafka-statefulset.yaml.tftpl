apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-statefulset
  namespace: ${namespace}
  labels:
    app: kafka
spec:
  serviceName: kafka-headless
  replicas: ${replicas}
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: ${kafka_image}
        ports:
        - containerPort: 9092
          name: kafka-port
        env:
        - name: KAFKA_BROKER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: ${zookeeper_connect}
        - name: KAFKA_ADVERTISED_LISTENERS
          value: PLAINTEXT://$(MY_POD_NAME).kafka-headless.${namespace}.svc.cluster.local:9092
        - name: KAFKA_LISTENERS
          value: PLAINTEXT://0.0.0.0:9092
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "3"
        - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: "3"
        - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
          value: "2"
        volumeMounts:
        - name: kafka-data
          mountPath: /var/lib/kafka
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
  volumeClaimTemplates:
  - metadata:
      name: kafka-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: ${storage_class}
      resources:
        requests:
          storage: ${storage_size}
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-headless
  namespace: ${namespace}
  labels:
    app: kafka
spec:
  ports:
  - port: 9092
    name: kafka-port
  clusterIP: None
  selector:
    app: kafka
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: ${namespace}
  labels:
    app: kafka
spec:
  ports:
  - port: 9092
    name: kafka-port
  selector:
    app: kafka